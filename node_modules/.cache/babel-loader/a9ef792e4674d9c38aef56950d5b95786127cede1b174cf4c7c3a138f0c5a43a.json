{"ast":null,"code":"import { ADD_ONE, APPLY_NUMBER, CHANGE_OPERATION, MEMORY_PLUS, MEMORY_RECALL, MEMORY_RESET, RESET } from \"./../actions\";\nexport const initialState = {\n  total: 0,\n  operation: \"+\",\n  memory: 0\n};\nconst calculateResult = (num1, num2, operation) => {\n  switch (operation) {\n    case \"+\":\n      return num1 + num2;\n    case \"*\":\n      return num1 * num2;\n    case \"-\":\n      return num1 - num2;\n    default:\n      return;\n  }\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ADD_ONE:\n      return {\n        ...state,\n        total: state.total + 1\n      };\n    case APPLY_NUMBER:\n      return {\n        ...state,\n        total: calculateResult(state.total, action.payload, state.operation)\n      };\n    case CHANGE_OPERATION:\n      return {\n        ...state,\n        operation: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_ONE","APPLY_NUMBER","CHANGE_OPERATION","MEMORY_PLUS","MEMORY_RECALL","MEMORY_RESET","RESET","initialState","total","operation","memory","calculateResult","num1","num2","reducer","state","action","type","payload"],"sources":["C:/git/fsweb-s10g1-reducer-calculator/src/reducers/index.js"],"sourcesContent":["import {\r\n  ADD_ONE,\r\n  APPLY_NUMBER,\r\n  CHANGE_OPERATION,\r\n  MEMORY_PLUS,\r\n  MEMORY_RECALL,\r\n  MEMORY_RESET,\r\n  RESET,\r\n} from \"./../actions\";\r\n\r\nexport const initialState = {\r\n  total: 0,\r\n  operation: \"+\",\r\n  memory: 0,\r\n};\r\n\r\nconst calculateResult = (num1, num2, operation) => {\r\n  switch (operation) {\r\n    case \"+\":\r\n      return num1 + num2;\r\n    case \"*\":\r\n      return num1 * num2;\r\n    case \"-\":\r\n      return num1 - num2;\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_ONE:\r\n      return {\r\n        ...state,\r\n        total: state.total + 1,\r\n      };\r\n\r\n    case APPLY_NUMBER:\r\n      return {\r\n        ...state,\r\n        total: calculateResult(state.total, action.payload, state.operation),\r\n      };\r\n\r\n    case CHANGE_OPERATION:\r\n      return {\r\n        ...state,\r\n        operation: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"AAAA,SACEA,OAAO,EACPC,YAAY,EACZC,gBAAgB,EAChBC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZC,KAAK,QACA,cAAc;AAErB,OAAO,MAAMC,YAAY,GAAG;EAC1BC,KAAK,EAAE,CAAC;EACRC,SAAS,EAAE,GAAG;EACdC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,eAAe,GAAGA,CAACC,IAAI,EAAEC,IAAI,EAAEJ,SAAS,KAAK;EACjD,QAAQA,SAAS;IACf,KAAK,GAAG;MACN,OAAOG,IAAI,GAAGC,IAAI;IACpB,KAAK,GAAG;MACN,OAAOD,IAAI,GAAGC,IAAI;IACpB,KAAK,GAAG;MACN,OAAOD,IAAI,GAAGC,IAAI;IACpB;MACE;EACJ;AACF,CAAC;AAED,MAAMC,OAAO,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACjC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKjB,OAAO;MACV,OAAO;QACL,GAAGe,KAAK;QACRP,KAAK,EAAEO,KAAK,CAACP,KAAK,GAAG;MACvB,CAAC;IAEH,KAAKP,YAAY;MACf,OAAO;QACL,GAAGc,KAAK;QACRP,KAAK,EAAEG,eAAe,CAACI,KAAK,CAACP,KAAK,EAAEQ,MAAM,CAACE,OAAO,EAAEH,KAAK,CAACN,SAAS;MACrE,CAAC;IAEH,KAAKP,gBAAgB;MACnB,OAAO;QACL,GAAGa,KAAK;QACRN,SAAS,EAAEO,MAAM,CAACE;MACpB,CAAC;IAEH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}